// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package twin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenNMSTwinIpcClient is the client API for OpenNMSTwinIpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenNMSTwinIpcClient interface {
	// Streams Twin request/Response from Minion to OpenNMS
	RpcStreaming(ctx context.Context, opts ...grpc.CallOption) (OpenNMSTwinIpc_RpcStreamingClient, error)
	// Stream Twin updates from OpenNMS to Minion.
	SinkStreaming(ctx context.Context, in *MinionHeader, opts ...grpc.CallOption) (OpenNMSTwinIpc_SinkStreamingClient, error)
}

type openNMSTwinIpcClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenNMSTwinIpcClient(cc grpc.ClientConnInterface) OpenNMSTwinIpcClient {
	return &openNMSTwinIpcClient{cc}
}

func (c *openNMSTwinIpcClient) RpcStreaming(ctx context.Context, opts ...grpc.CallOption) (OpenNMSTwinIpc_RpcStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpenNMSTwinIpc_ServiceDesc.Streams[0], "/OpenNMSTwinIpc/RpcStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &openNMSTwinIpcRpcStreamingClient{stream}
	return x, nil
}

type OpenNMSTwinIpc_RpcStreamingClient interface {
	Send(*TwinRequestProto) error
	Recv() (*TwinResponseProto, error)
	grpc.ClientStream
}

type openNMSTwinIpcRpcStreamingClient struct {
	grpc.ClientStream
}

func (x *openNMSTwinIpcRpcStreamingClient) Send(m *TwinRequestProto) error {
	return x.ClientStream.SendMsg(m)
}

func (x *openNMSTwinIpcRpcStreamingClient) Recv() (*TwinResponseProto, error) {
	m := new(TwinResponseProto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openNMSTwinIpcClient) SinkStreaming(ctx context.Context, in *MinionHeader, opts ...grpc.CallOption) (OpenNMSTwinIpc_SinkStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpenNMSTwinIpc_ServiceDesc.Streams[1], "/OpenNMSTwinIpc/SinkStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &openNMSTwinIpcSinkStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenNMSTwinIpc_SinkStreamingClient interface {
	Recv() (*TwinResponseProto, error)
	grpc.ClientStream
}

type openNMSTwinIpcSinkStreamingClient struct {
	grpc.ClientStream
}

func (x *openNMSTwinIpcSinkStreamingClient) Recv() (*TwinResponseProto, error) {
	m := new(TwinResponseProto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpenNMSTwinIpcServer is the server API for OpenNMSTwinIpc service.
// All implementations must embed UnimplementedOpenNMSTwinIpcServer
// for forward compatibility
type OpenNMSTwinIpcServer interface {
	// Streams Twin request/Response from Minion to OpenNMS
	RpcStreaming(OpenNMSTwinIpc_RpcStreamingServer) error
	// Stream Twin updates from OpenNMS to Minion.
	SinkStreaming(*MinionHeader, OpenNMSTwinIpc_SinkStreamingServer) error
	mustEmbedUnimplementedOpenNMSTwinIpcServer()
}

// UnimplementedOpenNMSTwinIpcServer must be embedded to have forward compatible implementations.
type UnimplementedOpenNMSTwinIpcServer struct {
}

func (UnimplementedOpenNMSTwinIpcServer) RpcStreaming(OpenNMSTwinIpc_RpcStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method RpcStreaming not implemented")
}
func (UnimplementedOpenNMSTwinIpcServer) SinkStreaming(*MinionHeader, OpenNMSTwinIpc_SinkStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SinkStreaming not implemented")
}
func (UnimplementedOpenNMSTwinIpcServer) mustEmbedUnimplementedOpenNMSTwinIpcServer() {}

// UnsafeOpenNMSTwinIpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenNMSTwinIpcServer will
// result in compilation errors.
type UnsafeOpenNMSTwinIpcServer interface {
	mustEmbedUnimplementedOpenNMSTwinIpcServer()
}

func RegisterOpenNMSTwinIpcServer(s grpc.ServiceRegistrar, srv OpenNMSTwinIpcServer) {
	s.RegisterService(&OpenNMSTwinIpc_ServiceDesc, srv)
}

func _OpenNMSTwinIpc_RpcStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpenNMSTwinIpcServer).RpcStreaming(&openNMSTwinIpcRpcStreamingServer{stream})
}

type OpenNMSTwinIpc_RpcStreamingServer interface {
	Send(*TwinResponseProto) error
	Recv() (*TwinRequestProto, error)
	grpc.ServerStream
}

type openNMSTwinIpcRpcStreamingServer struct {
	grpc.ServerStream
}

func (x *openNMSTwinIpcRpcStreamingServer) Send(m *TwinResponseProto) error {
	return x.ServerStream.SendMsg(m)
}

func (x *openNMSTwinIpcRpcStreamingServer) Recv() (*TwinRequestProto, error) {
	m := new(TwinRequestProto)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OpenNMSTwinIpc_SinkStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MinionHeader)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenNMSTwinIpcServer).SinkStreaming(m, &openNMSTwinIpcSinkStreamingServer{stream})
}

type OpenNMSTwinIpc_SinkStreamingServer interface {
	Send(*TwinResponseProto) error
	grpc.ServerStream
}

type openNMSTwinIpcSinkStreamingServer struct {
	grpc.ServerStream
}

func (x *openNMSTwinIpcSinkStreamingServer) Send(m *TwinResponseProto) error {
	return x.ServerStream.SendMsg(m)
}

// OpenNMSTwinIpc_ServiceDesc is the grpc.ServiceDesc for OpenNMSTwinIpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenNMSTwinIpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OpenNMSTwinIpc",
	HandlerType: (*OpenNMSTwinIpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RpcStreaming",
			Handler:       _OpenNMSTwinIpc_RpcStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SinkStreaming",
			Handler:       _OpenNMSTwinIpc_SinkStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "twin.proto",
}
